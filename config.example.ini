# =============================================================================
# FORECASTING PROJECT - EXAMPLE CONFIGURATION FILE
# =============================================================================
# This is a template configuration file that shows all available settings.
# 
# INSTRUCTIONS:
# 1. Copy this file to 'config.ini'
# 2. Update the values with your actual settings
# 3. Never commit 'config.ini' to Git (it contains secrets)
# 4. This file is safe to commit (contains only examples)
#
# SECURITY NOTE:
# - Replace placeholder values with your actual credentials
# - Use environment variables for sensitive data in production
# - Keep API keys, passwords, and database URLs secure
# =============================================================================

[data]
# Data file paths and column configurations
raw_path = data/raw/retail_sales_dataset.csv          # Path to your raw CSV data file
processed_path = data/processed/processed_retail_sales_data.csv  # Where processed data will be saved
date_col = date                                       # Name of the date column in your CSV
product_col = product_category                        # Name of the product category column
sales_col = total_amount                              # Name of the sales/amount column
id_col = product_id                                   # Name of the product ID column
test_size = 0.2                                       # Fraction of data to use for testing (0.2 = 20%)

[arima]
# ARIMA model hyperparameters (AutoRegressive Integrated Moving Average)
# Format: (p, d, q) where:
# - p: order of autoregression (number of lag observations)
# - d: degree of differencing (number of times data is differenced)
# - q: order of moving average (size of moving average window)
order = 1,1,1                                         # (p, d, q) parameters for ARIMA
seasonal_order = 0,0,0,0                             # Seasonal ARIMA parameters (P, D, Q, s)

[prophet]
# Facebook Prophet model hyperparameters
# Prophet is good for time series with strong seasonal patterns
seasonality_mode = additive                           # 'additive' or 'multiplicative' seasonality
yearly_seasonality = true                             # Enable yearly seasonality patterns
weekly_seasonality = true                             # Enable weekly seasonality patterns
daily_seasonality = false                             # Enable daily seasonality patterns

[lstm]
# LSTM (Long Short-Term Memory) neural network hyperparameters
# LSTM is good for complex, non-linear time series patterns
input_size = 1                                        # Number of input features (will be auto-detected)
hidden_size = 64                                      # Number of hidden units in LSTM layers
num_layers = 2                                        # Number of LSTM layers
dropout = 0.2                                         # Dropout rate for regularization (0.0-1.0)
batch_size = 32                                       # Number of samples per training batch
epochs = 20                                           # Number of complete training cycles
learning_rate = 0.001                                 # Learning rate for optimization
sequence_length = 30                                  # Number of time steps to look back

[mlflow]
# MLflow experiment tracking configuration
# MLflow helps track model training experiments, parameters, and metrics
tracking_uri = mlruns                                # Local MLflow tracking server directory
experiment_name = sales_forecasting                  # Name of the MLflow experiment

[prefect]
# Prefect workflow orchestration configuration
# Prefect handles automated pipeline scheduling and execution
retrain_cron = 0 2 * * *                            # Cron schedule for daily retraining (2 AM UTC)
                                                    # Format: minute hour day month day_of_week

[notifications]
# Email and Slack notification settings
# Get alerts when training completes or fails
email_enabled = true                                # Enable email notifications
slack_enabled = false                               # Enable Slack notifications
smtp_server = smtp.gmail.com                        # SMTP server for sending emails
smtp_port = 587                                     # SMTP port (587 for TLS)
email_from = your-email@gmail.com                   # Sender email address
email_password = your-app-password                  # App password (not regular password)
email_to = recipient@example.com                    # Recipient email address
slack_webhook =                                     # Slack webhook URL (if using Slack)
performance_threshold = 0.8                         # Alert if model performance drops below this 